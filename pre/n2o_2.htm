<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="description" content="" />
<meta name="author" content="Maxim Sokhatsky" />
<title>N2O</title>
<link rel="stylesheet" href="https://n2o.dev/blank.css?x=15" />
<link rel="stylesheet" href="https://n2o.dev/zima.css?x=15" />
<link rel="shortcut icon" type="image/x-icon" href="../img/favicon.ico" />
<link rel="apple-touch-icon" sizes="180x180" href="../img/apple-touch-icon.png" />
<link rel="icon" type="image/png" sizes="32x32" href="../img/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="../img/favicon-16x16.png" />
<link rel="manifest" href="../img/site.webmanifest" />
</head>
<body>
<nav>
  <a href="https://n2o.dev/ua/">DEV</a>
  <a href="index.html">N2O</a>
  <a href="#" style="background:#ededed;">N2O</a>
  <div class="dropdown">
    <a onclick="drop()" class="dropbtn">UA</a>
    <div id="dropdown" class="dropdown-content">
      <a href="https://ws.n2o.space/man/n2o.htm">EN</a>
      <a href="n2o.htm">UA</a>
    </div>
  </div>
</nav>
<header>
  <a href="index.html"><img src="https://n2o.space/img/Synrc Neo.svg" ></a>
  <h1>N2O</h1>
</header>
<main>
<article>
  <section>
    <h3>ВСТУП</h3>
    <p><a href="https://github.com/synrc/n2o/blob/master/src/n2o.erl">N2O</a>
      надає спосіб створення, налаштування і запуску
      довільних додатків та протоколів всередині деяких хостів,
      в які N2O може бути включений, таких, як 
      <a href="https://github.com/ninenines/cowboy">cowboy</a>
      та <a href="http://github.com/synrc/emqttd">emqttd</a>.
      Кожен додаток також може створювати свої сервісні протоколи-процеси,
      так, як веб-сторінки створюють WebSocket з'єднання,
      системи управління бізнес-процесами створюють екземпляри процесів,
      або як чат-додатки створюють процеси управління кімнатами чи персональними чатами.
      З N2O все управляється протоколами.</p>
    <center><img src="../img/N2O.svg" width="60%" ></center>
    <p>N2O поставляється для роботи в двох режимах:
        1) всередині <a href="n2o_mqtt.htm">n2o_mqtt</a> воркерів;
      2) всередині cowboy процесів, реалізованих в <a href="n2o_stream.htm">n2o_stream</a>.
      У першому випадку, сервер MQTT використовується між клієнтами та серверними воркерами.
      У другому випадку, з Erlang процесів задіяні лише клієнти.
      Ви можете створити власну конфігурацію циклу обробки N2O.</p>
    <p><img src="../img/WebSocket + MQTT.svg" width="100%" ></p>
    <p>Сам по собі, N2O — це вбудовуваний протокольний цикл <a href="n2o_proto.htm">n2o_proto</a>, який ви можете включати у свої продукти.
      Орім цього, він обробляє кеш та сесії
      з гнучкими <a href="n2o_pi.htm">n2o_pi</a> процесами без обмеження права власності.
      А також визначає AES/CBC—128 кодування та BERT/JSON декодер.</p>
  </section>
  <section>
    <h3>ТИПИ</h3>
    <figure>
      <code>

 -type formatter() :: binary | json | bert | text | default | atom().
 -type response()  :: { formatter(), binary() }.
        
      </code>
    </figure>
    <figure>
      <figcaption>Лістинг 1. Erlang/OTP записи (records)</figcaption>
      <code>

      #ok { data  = [] :: term() }.
   #error { data  = [] :: term() }.
        
      </code>
    </figure>
    <figure>
      <figcaption>Лістинг 2. N2O Протокол</figcaption>
      <code>

   #reply { resp  = [] :: [] | response(),
            req   = [] :: [] | term(),
            state = [] :: [] | term() }.

 #unknown { data  = [] :: [] | binary(),
            req   = [] :: [] | term(),
            state = [] :: [] | term() }.
        
      </code>
    </figure>
    <figure>
      <figcaption>Лістинг 3. N2O контекст (State)</figcaption>
      <code>

 #cx { session   = [] :: [] | binary(),
       formatter = bert :: bert | json,
       actions   = [] :: list(tuple()),
       state     = [] :: [] | term(),
       module    = [] :: [] | atom(),
       lang      = [] :: [] | atom(),
       path      = [] :: [] | binary(),
       node      = [] :: [] | atom(),
       pid       = [] :: [] | pid(),
       vsn       = [] :: [] | integer() }).
        
      </code>
    </figure>
  </section>
  <section>
    <h3>ПРОТОКОЛ</h3>
    <p>Хоча всі протоколи додатків в системі вимагають середовище з одним ефектом,
      або з таким же шляхом обробки помилок,
<b>n2o</b> визначає єдиний протокольний цикл,
      як стек протоколів, для всіх додатків.</p>
    <p>В базовому варіанті <b>n2o</b>
      містить протоколи NITRO та FTP,
      що дозволяє створювати працюючі в режимі реального часу веб-додатки,
      з протоколами на основі бінарних,
      а також — надійний та продуктивний клієнт для вивантаження файлів,
      разом з протоколом передачі файлів.
      Для створення NITRO веб-додатків, вам необхідно підключити <b>nitro</b> в залежності.</p>
    <figure>
      <figcaption></figcaption>
      <code>
info(term(),term(),#cx{}) -&#62; #reply{} | #unknown{}.
      </code>
    </figure>
    <p><b>info/3</b> — функція зворотнього виклику (колбек) N2O протоколу,
      яка викликається при кожному вхідному запиті.</p>
  </section>
  <section>
    <h3>RPC MQTT</h3>
    <p>N2O надає RPC через механізм MQ для MQTT пристроїв.
           N2O запускає набір <a href="n2o_mqtt.htm">n2o_mqtt</a> воркерів —
       <a href="n2o_pi.htm">n2o_pi</a>
      процесів, які слухають певні топіки певної кімнати.
      Відповіді надсилаються до теми подій,
      яка автоматичного підписана при старті сесії MQTT.</p>
    <figure>
      <figcaption>Лістинг 5. MQTT RPC Топіків</figcaption>
      <code>

  actions/:vsn/:module/:client
  events/:vsn/:node/:module/:client
        
      </code>
    </figure>
  </section>
  <section>
    <h3>RPC WebSocket</h3>
    <p>У випадку чистого WebSocket, в N2O реалізовано <a href="n2o_stream.htm">n2o_stream</a>
      як cowboy модуль, що підтримує бінарні та текстові повідомлення.</p>
    <figure>
      <figcaption>Лістинг 6. Cowboy stream протокол</figcaption>
      <code>

  #binary { data :: binary() }.
  #text   { data :: binary() }.
        
      </code>
    </figure>
  </section>
  <section>
    <h3>ПРИКЛАД</h3>
    <p>Нижче наведено приклад перевизначення INIT протоколу.</p>
    <figure>
      <figcaption>Лістинг 7. Користувацький протокол INIT</figcaption>
      <code>

 -module(custom_init).
 -include(&#34;n2o.hrl&#34;).
 -export([info/3]).

 info({text,&#60;&#60;&#34;N2O,&#34;,Pickle/binary&#62;&#62;}, Req, State) -&#62;
      {'Token',Token} = n2o_session:authenticate([],Pickle),
      Sid = case n2o:depickle(Token) of {{S,_},_} -&#62; S; X -&#62; X end,
      New = State#cx{session = Sid},
      {reply,{bert,{io,&#60;&#60;&#34;console.log('connected')&#34;&#62;&#62;,
             {'Token',Token}}}, Req, New};

 info(Message,Req,State) -&#62; {unknown,Message,Req,State}.
        
      </code>
    </figure>
  </section>
  <section>
    <h3>НАЛАШТУВАННЯ</h3>
    <p>Просто допишіть ім'я модуля реалізації протоколу до значень ключа <b>protocol</b> в sys.config.</p>
    <figure>
      <code>

  [{n2o,[{cache,n2o},
         {upload,&#34;priv/static&#34;},
         {mq,n2o_syn},
         {ttl,900},
         {timer,{0,1,0}}
         {tables,[cookies,file,caching,ring,async]},
         {hmac,sha256},
         {filename,n2o_ftp},
         {formatter,n2o_bert},
         {session,n2o_session},
         {pickler,n2o_secret},
         {protocols,[n2o_ftp,n2o_nitro]},
         {nitro_prolongate,false},
         {filter,{n2o_proto,push}},
         {origin,&#60;&#60;&#34;*&#34;&#62;&#62;},
         {timer,{0,10,0}}]}].
        
      </code>
    </figure>
    <p>N2O — це фасад для наступних сервісів: кеш, MQ, форматування повідомлень,
           сесії, кодування та циклів протоколів. Іншою частиною N2O є модуль <a href="n2o_pi.htm">n2o_pi</a>,
      який запускає процеси додатку під наглядом, для можливості використання N2O API.
      В цій простій конфігурації ви можете встановити будь-яку реалізацію для будь-якого сервісу.</p>
  </section>
  <section>
    <p>Наступні сервіси, наявні в модулі <b>n2o</b>, ви також можете довільно налаштовувати:</p>
  </section>
  <section>
    <h3>CACHE</h3>
    <p>Кеш — механізм зберігання в швидкій памяті.
      Просто зберігайте значення для ключів за допомогою наступних функцій,
      а системний таймер очищуватиме прострочені записи.
      Ви можете вибрати реалізацію модуля кешування, за допомогою
      параметру cache бібліотеки N2O.
      Реалізація n2o cache за замовчуванням являє собою ets з терміном зберігання записів.
</p>
    <figure>
      <figcaption></figcaption>
      <code>
cache(Tab, Key, Value, Till) -&#62; term().
      </code>
    </figure>
    <p>Записує значення Value із заданим TTL.</p>
    <figure>
      <figcaption></figcaption>
      <code>
cache(Tab, Key) -&#62; term().
      </code>
    </figure>
    <p>Повертає значення по ключу Key.</p>
  </section>
  <section>
    <h3>MQ</h3>
    <p>Мінімальною вимогою до будь-якого фреймворка є наявність pub/sub API.
           N2O надає налаштовуваний API через параметр налаштувань <b>mq</b>.</p>
    <figure>
      <figcaption></figcaption>
      <code>
reg(term()) -&#62; term().
      </code>
    </figure>
    <p>Підписати поточного клієнта на transient topic.
      У конкретних реалізаціях семантика може відрізнятись.
      В MQTT ви можете підписати оффлайн/онлайн клієнтів на будь-який персистентний топік.
      Також в MQTT ця функція підписує клієнта, а не Erlang процес.
</p>
    <figure>
      <figcaption></figcaption>
      <code>
unreg(term()) -&#62; term().
      </code>
    </figure>
    <p>Відписати поточного клієнта від перехідний топік.
           В MQTT ви можете видалити підписку з персистентної бази даних.</p>
    <figure>
      <figcaption></figcaption>
      <code>
send(term(), term()) -&#62; term().
      </code>
    </figure>
    <p>Опублікувати повідомлення в топіку.
      В MQTT клієнти отримають повідомлення зі сховища ефірних транзакцій, як тільки появляться онлайн,
      у випадку, якщо на момент публікації повідомлення вони були оффлайн.
</p>
  </section>
  <section>
    <h3>FORMAT</h3>
    <p>Ви вказуєте форматування в протоколі повернення повідомлення. Наприклад:</p>
    <figure>
      <code>

 info({Code}, Req, State) -&#62;
      {reply,{bert,{io,nitro:jse(Code),&#60;&#60;&#62;&#62;}}, Req, State};
        
      </code>
    </figure>
    <figure>
      <figcaption></figcaption>
      <code>
encode(record()) -&#62; binary().
      </code>
    </figure>
    <p>Серіалізується з кортежа.</p>
    <figure>
      <figcaption></figcaption>
      <code>
decode(binary()) -&#62; record().
      </code>
    </figure>
    <p>Серіалізується в кортеж.</p>
    <p>Нижче приклад реалізації <b>n2o_bert</b> форматтера:</p>
    <figure>
      <code>

 encode(Erl) -&#62; term_to_binary(Erl).
 decode(Bin) -&#62; binary_to_term(Bin,[safe]).
        
      </code>
    </figure>
  </section>
  <section>
    <h3>SESSION</h3>
    <p>Сесії зберігаються в issued tokens, закодовані з допомогою AES/CBC-128.
           За замовчуванням, всі значення сесії зберігаються у вигляду кешу в ETS, з реалізацією в <a href="n2o_session.htm">n2o_session</a>.
       </p>
    <figure>
      <figcaption></figcaption>
      <code>
session(Key, Value) -&#62; term().
      </code>
    </figure>
    <p>Встановити значення змінної сессії.</p>
    <figure>
      <figcaption>Лістинг 8. Сесії</figcaption>
      <code>

 1&#62; rr(n2o).
 [bin,client,cx,direct,ev,flush,ftp,ftpack,handler,
  mqtt_client,mqtt_message,pickle,server]
 2&#62; put(context,#cx{}).
 undefined
 3&#62; n2o:session(user,maxim).
 maxim
 4&#62; ets:tab2list(cookies).
[{{[],user},{63710014344,&#34;maxim&#34;}},
 {{&#60;&#60;&#34;5842b7e749a8cf44c920&#34;&#62;&#62;,auth},{63710014069,[]}]
        
      </code>
    </figure>
    <figure>
      <figcaption></figcaption>
      <code>
session(Key) -&#62; term().
      </code>
    </figure>
    <p>Отримати значення змінної сесії.</p>
  </section>
  <section>
    <h3>PICKLE</h3>
    <figure>
      <figcaption></figcaption>
      <code>
pickle(term()) -&#62; binary().
      </code>
    </figure>
    <p>Кодування Erlang терма.</p>
    <figure>
      <figcaption></figcaption>
      <code>
depickle(binary()) -&#62; term().
      </code>
    </figure>
    <p>Декодування Erlang терма.</p>
  </section>
  <section>
    <p>Цей модуль може бути пов'язаним з:       <a href="n2o_pi.htm">n2o_pi</a>,
             <a href="n2o_auth.htm">n2o_auth</a>,
             <a href="n2o_stream.htm">n2o_stream</a>,
             <a href="n2o_mqtt.htm">n2o_mqtt</a>,
             <a href="n2o_proto.htm">n2o_proto</a>.
       </p>
  </section>
</article>
</main>
<footer>2005—2019 © Synrc Research Center</footer>
<script>function drop(){document.getElementById("dropdown").classList.toggle("show");}</script>
</body>
</html>
