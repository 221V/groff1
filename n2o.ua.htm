<!DOCTYPE html><html><head><meta charset="utf-8" /><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="description" content="" /><meta name="author" content="Maxim Sokhatsky" /><title>N2O</title><link rel="stylesheet" href="https://tonpa.guru/blank.css?v=2" /></head><body><nav>
    <a href="https://n2o.dev/ua/">DEV</a>
    <a href="index.html">N2O</a>
    <a href="#" style="background:#ededed;">N2O</a>
    <a href="#" style="background:#ededed;">UA</a>
    <a href="../n2o.htm">EN</a>
</nav><header>
    <a href="index.html"><img src="https://n2o.space/img/Synrc Neo.svg" /></a>
    <h1>N2O</h1>
</header><main>
    <section>
        <h3>ВСТУП</h3>
        <p><a href="https://github.com/synrc/n2o/blob/master/src/n2o.erl">N2O</a>
        надає спосіб створення, налаштування і запуску
        довільних додатків та протоколів всередині деяких хостів,
        в які N2O може бути включений, таких, як 
        <a href="https://github.com/ninenines/cowboy">cowboy</a>
        та <a href="http://github.com/synrc/emqttd">emqttd</a>.
        Кожен додаток також може створювати свої сервісні протоколи-процеси,
        так, як веб-сторінки створюють WebSocket з'єднання,
        системи управління бізнес-процесами створюють екземпляри процесів,
        або як чат-додатки створюють процеси управління кімнатами чи персональними чатами.
        З N2O все управляється протоколами.</p>
        <center><img src="../N2O.svg" width="60%" /></center>
        <p>N2O поставляється для роботи в двох режимах:
        1) всередині <a href="n2o_mqtt.htm">n2o_mqtt</a> воркерів;
        2) всередині cowboy процесів, реалізованих в <a href="n2o_stream.htm">n2o_stream</a>.
        У першому випадку, сервер MQTT використовується між клієнтами та серверними воркерами.
        У другому випадку, з Erlang процесів задіяні лише клієнти.
        Ви можете створити власну конфігурацію циклу обробки N2O.</p>
        <p><img src="../WebSocket + MQTT.svg" width="100%" /></p>
        <p>Сам по собі, N2O — це вбудовуваний протокольний цикл <a href="n2o_proto.htm">n2o_proto</a>, який ви можете включати у свої продукти.
        Орім цього, він обробляє кеш та сесії
        з гнучкими <a href="n2o_pi.htm">n2o_pi</a> процесами без обмеження права власності.
        А також визначає AES/CBC—128 кодування та BERT/JSON декодер.</p>

    </section>
    <section>
        <h3>ТИПИ</h3>
        <figure><code>
 -type formatter() :: binary | json | bert | text | default | atom().
 -type response()  :: { formatter(), binary() }.
        </code></figure>

        <figure><figcaption>Лістинг 1. Erlang/OTP записи (records)</figcaption><code>
      #ok { data  = [] :: term() }.
   #error { data  = [] :: term() }.
        </code></figure>

        <figure><figcaption>Лістинг 2. N2O Протокол</figcaption><code>
   #reply { resp  = [] :: [] | response(),
            req   = [] :: [] | term(),
            state = [] :: [] | term() }.

 #unknown { data  = [] :: [] | binary(),
            req   = [] :: [] | term(),
            state = [] :: [] | term() }.
        </code></figure>

        <figure><figcaption>Лістинг 3. N2O контекст (State)</figcaption><code>
 #cx { session   = [] :: [] | binary(),
       formatter = bert :: bert | json,
       actions   = [] :: list(tuple()),
       state     = [] :: [] | term(),
       module    = [] :: [] | atom(),
       lang      = [] :: [] | atom(),
       path      = [] :: [] | binary(),
       node      = [] :: [] | atom(),
       pid       = [] :: [] | pid(),
       vsn       = [] :: [] | integer() }).
        </code></figure>
    </section>
    <section>
        <h3>ПРОТОКОЛ</h3>
        <p>Хоча всі протоколи додатків в системі вимагають середовище з одним ефектом,
           або з таким же шляхом обробки помилок,
           <b>n2o</b> визначає єдиний протокольний цикл,
           як стек протоколів, для всіх додатків.</p>
        <p>В базовому варіанті <b>n2o</b> містить протоколи NITRO та FTP,
           що дозволяє створювати працюючі в режимі реального часу веб-додатки,
           з протоколами на основі бінарних,
           а також — надійний та продуктивний клієнт для вивантаження файлів,
           разом з протоколом передачі файлів.
           Для створення NITRO веб-додатків, вам необхідно підключити <b>nitro</b> в залежності.</p>
        <h4>info(term(),term(),#cx{}) -> #reply{} | #unknown{}.</h4>
        <p><b>info/3</b> — функція зворотнього виклику (колбек) N2O протоколу,
        яка викликається при кожному вхідному запиті.</p>
    </section>
    <section>
        <h3>RPC MQTT</h3>

        <p>N2O надає RPC через механізм MQ для MQTT пристроїв.
           N2O запускає набір <a href="n2o_mqtt.htm">n2o_mqtt</a> воркерів —
           <a href="n2o_pi.htm">n2o_pi</a> процесів, які слухають певні топіки певної кімнати.
           Відповіді надсилаються до теми подій,
           яка автоматичного підписана при старті сесії MQTT.</p>
        <figure><figcaption>Лістинг 5. MQTT RPC Топіків</figcaption><code>
  actions/:vsn/:module/:client
  events/:vsn/:node/:module/:client
        </code></figure>
    </section>
    <section>
        <h3>RPC WebSocket</h3>
        <p>У випадку чистого WebSocket, в N2O реалізовано <a href="n2o_stream.htm">n2o_stream</a>
           як cowboy модуль, що підтримує бінарні та текстові повідомлення.</p>
        <figure><figcaption>Лістинг 6. Cowboy stream протокол</figcaption><code>
  #binary { data :: binary() }.
  #text   { data :: binary() }.
        </code></figure>
    </section>
    <section>
        <h3>ПРИКЛАД</h3>
        <p>Нижче наведено приклад перевизначення INIT протоколу.</p>
<figure><figcaption>Лістинг 7. Користувацький протокол INIT</figcaption><code>
 -module(custom_init).
 -include("n2o.hrl").
 -export([info/3]).

 info({text,&lt;&lt;"N2O,",Pickle/binary>>}, Req, State) ->
      {'Token',Token} = n2o_session:authenticate([],Pickle),
      Sid = case n2o:depickle(Token) of {{S,_},_} -> S; X -> X end,
      New = State#cx{session = Sid},
      {reply,{bert,{io,&lt;&lt;"console.log('connected')">>,
             {'Token',Token}}}, Req, New};

 info(Message,Req,State) -> {unknown,Message,Req,State}.
        </code></figure>
    </section>
    <section>
        <h3>НАЛАШТУВАННЯ</h3>
        <p>Просто допишіть ім'я модуля реалізації протоколу до значень ключа <b>protocol</b> в sys.config.</p>
        <figure><code>
  [{n2o,[{cache,n2o},
         {upload,"priv/static"},
         {mq,n2o_syn},
         {ttl,900},
         {timer,{0,1,0}}
         {tables,[cookies,file,caching,ring,async]},
         {hmac,sha256},
         {filename,n2o_ftp},
         {formatter,n2o_bert},
         {session,n2o_session},
         {pickler,n2o_secret},
         {protocols,[n2o_ftp,n2o_nitro]},
         {nitro_prolongate,false},
         {filter,{n2o_proto,push}},
         {origin,&lt;&lt;"*">>},
         {timer,{0,10,0}}]}].
        </code></figure>
        <p>N2O — це фасад для наступних сервісів: кеш, MQ, форматування повідомлень,
           сесії, кодування та циклів протоколів. Іншою частиною N2O є модуль <a href="n2o_pi.htm">n2o_pi</a>,
           який запускає процеси додатку під наглядом, для можливості використання N2O API.
           В цій простій конфігурації ви можете встановити будь-яку реалізацію для будь-якого сервісу.</p>
    </section>
    <section>
        <p>Наступні сервіси, наявні в модулі <b>n2o</b>, ви також можете довільно налаштовувати:</p>
    </section>
    <section>
        <h3>CACHE</h3>
        <p>Кеш — механізм зберігання в швидкій памяті.
           Просто зберігайте значення для ключів за допомогою наступних функцій,
           а системний таймер очищуватиме прострочені записи.
           Ви можете вибрати реалізацію модуля кешування, за допомогою
           параметру cache бібліотеки N2O.
           Реалізація n2o cache за замовчуванням являє собою ets з терміном зберігання записів.</p>
        <h4>cache(Tab, Key, Value, Till) -> term().</h4>
        <p>Записує значення Value із заданим TTL.</p>
        <h4>cache(Tab, Key) -> term().</h4>
        <p>Повертає значення по ключу Key.</p>
    </section>
    <section>
        <h3>MQ</h3>
        <p>Мінімальною вимогою до будь-якого фреймворка є наявність pub/sub API.
           N2O надає налаштовуваний API через параметр налаштувань <b>mq</b>.</p>
        <h4>reg(term()) -> term().</h4>
        <p>Підписати поточного клієнта на transient topic.
           У конкретних реалізаціях семантика може відрізнятись.
           В MQTT ви можете підписати оффлайн/онлайн клієнтів на будь-який персистентний топік.
           Також в MQTT ця функція підписує клієнта, а не Erlang процес.</p>
        <h4>unreg(term()) -> term().</h4>
        <p>Відписати поточного клієнта від перехідний топік.
           В MQTT ви можете видалити підписку з персистентної бази даних.</p>
        <h4>send(term(), term()) -> term().</h4>
        <p>Опублікувати повідомлення в топіку.
           В MQTT клієнти отримають повідомлення зі сховища ефірних транзакцій, як тільки появляться онлайн,
           у випадку, якщо на момент публікації повідомлення вони були оффлайн.</p>
    </section>
    <section>
        <h3>FORMAT</h3>
        <p>Ви вказуєте форматування в протоколі повернення повідомлення. Наприклад:</p>
        <figure><code>
 info({Code}, Req, State) ->
      {reply,{bert,{io,nitro:jse(Code),&lt;&lt;>>}}, Req, State};
        </code></figure>
        <h4>encode(record()) -> binary().</h4>
        <p>Серіалізується з кортежа.</p>
        <h4>decode(binary()) -> record().</h4>
        <p>Серіалізується в кортеж.</p>
        <p>Нижче приклад реалізації <b>n2o_bert</b> форматтера:</p>
        <figure><code>
 encode(Erl) -> term_to_binary(Erl).
 decode(Bin) -> binary_to_term(Bin,[safe]).
        </code></figure>
    </section>
    <section>
        <h3>SESSION</h3>
        <p>Сесії зберігаються в issued tokens, закодовані з допомогою AES/CBC-128.
           За замовчуванням, всі значення сесії зберігаються у вигляду кешу в ETS, з реалізацією в <a href="n2o_session.htm">n2o_session</a>.
           </p>
        <h4>session(Key, Value) -> term().</h4>
        <p>Встановити значення змінної сессії.</p>
        <figure><figcaption>Лістинг 8. Сесії</figcaption><code>
 1> rr(n2o).
 [bin,client,cx,direct,ev,flush,ftp,ftpack,handler,
  mqtt_client,mqtt_message,pickle,server]
 2> put(context,#cx{}).
 undefined
 3> n2o:session(user,maxim).
 maxim
 4> ets:tab2list(cookies).
[{{[],user},{63710014344,"maxim"}},
 {{&lt;&lt;"5842b7e749a8cf44c920">>,auth},{63710014069,[]}]
        </code></figure>
        <h4>session(Key) -> term().</h4>
        <p>Отримати значення змінної сесії.</p>
    </section>
    <section>
        <h3>PICKLE</h3>
        <h4>pickle(term()) -> binary().</h4>
        <p>Кодування Erlang терма.</p>
        <h4>depickle(binary()) -> term().</h4>
        <p>Декодування Erlang терма.</p>
    </section>
    <section>
        <p>Цей модуль може бути пов'язаним з:
        <a href="n2o_pi.htm">n2o_pi</a>,
        <a href="n2o_auth.htm">n2o_auth</a>,
        <a href="n2o_stream.htm">n2o_stream</a>,
        <a href="n2o_mqtt.htm">n2o_mqtt</a>,
        <a href="n2o_proto.htm">n2o_proto</a>.
        </p>
    </section>
</main><footer>
    2005—2019 © Synrc Research Center
</footer></body></html>