.TH n2o.ua 1 "n2o.ua" "Synrc Research Center" "N2O"
.SH NAME
n2o.ua

.SH ÐÐ¡Ð¢Ð£Ð
.LP
\fIN2O\fR\& Ð½Ð°Ð´Ð°Ñ ÑÐ¿Ð¾ÑÑÐ± ÑÑÐ²Ð¾ÑÐµÐ½Ð½Ñ, Ð½Ð°Ð»Ð°ÑÑÑÐ²Ð°Ð½Ð½Ñ Ñ Ð·Ð°Ð¿ÑÑÐºÑ
Ð´Ð¾Ð²ÑÐ»ÑÐ½Ð¸Ñ Ð´Ð¾Ð´Ð°ÑÐºÑÐ² ÑÐ° Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»ÑÐ² Ð²ÑÐµÑÐµÐ´Ð¸Ð½Ñ Ð´ÐµÑÐºÐ¸Ñ ÑÐ¾ÑÑÑÐ²,
Ð² ÑÐºÑ N2O Ð¼Ð¾Ð¶Ðµ Ð±ÑÑÐ¸ Ð²ÐºÐ»ÑÑÐµÐ½Ð¸Ð¹, ÑÐ°ÐºÐ¸Ñ, ÑÐº
\fIcowboy\fR\& ÑÐ°
\fIemqttd\fR\&.
ÐÐ¾Ð¶ÐµÐ½ Ð´Ð¾Ð´Ð°ÑÐ¾Ðº ÑÐ°ÐºÐ¾Ð¶ Ð¼Ð¾Ð¶Ðµ ÑÑÐ²Ð¾ÑÑÐ²Ð°ÑÐ¸ ÑÐ²Ð¾Ñ ÑÐµÑÐ²ÑÑÐ½Ñ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ð¸-Ð¿ÑÐ¾ÑÐµÑÐ¸,
ÑÐ°Ðº, ÑÐº Ð²ÐµÐ±-ÑÑÐ¾ÑÑÐ½ÐºÐ¸ ÑÑÐ²Ð¾ÑÑÑÑÑ WebSocket Ð·'ÑÐ´Ð½Ð°Ð½Ð½Ñ,
ÑÐ¸ÑÑÐµÐ¼Ð¸ ÑÐ¿ÑÐ°Ð²Ð»ÑÐ½Ð½Ñ Ð±ÑÐ·Ð½ÐµÑ-Ð¿ÑÐ¾ÑÐµÑÐ°Ð¼Ð¸ ÑÑÐ²Ð¾ÑÑÑÑÑ ÐµÐºÐ·ÐµÐ¼Ð¿Ð»ÑÑÐ¸ Ð¿ÑÐ¾ÑÐµÑÑÐ²,
Ð°Ð±Ð¾ ÑÐº ÑÐ°Ñ-Ð´Ð¾Ð´Ð°ÑÐºÐ¸ ÑÑÐ²Ð¾ÑÑÑÑÑ Ð¿ÑÐ¾ÑÐµÑÐ¸ ÑÐ¿ÑÐ°Ð²Ð»ÑÐ½Ð½Ñ ÐºÑÐ¼Ð½Ð°ÑÐ°Ð¼Ð¸ ÑÐ¸ Ð¿ÐµÑÑÐ¾Ð½Ð°Ð»ÑÐ½Ð¸Ð¼Ð¸ ÑÐ°ÑÐ°Ð¼Ð¸.
Ð N2O Ð²ÑÐµ ÑÐ¿ÑÐ°Ð²Ð»ÑÑÑÑÑÑ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ð°Ð¼Ð¸.
.LP
N2O Ð¿Ð¾ÑÑÐ°Ð²Ð»ÑÑÑÑÑÑ Ð´Ð»Ñ ÑÐ¾Ð±Ð¾ÑÐ¸ Ð² Ð´Ð²Ð¾Ñ ÑÐµÐ¶Ð¸Ð¼Ð°Ñ:
1) Ð²ÑÐµÑÐµÐ´Ð¸Ð½Ñ
\fIn2o_mqtt\fR\& Ð²Ð¾ÑÐºÐµÑÑÐ²;
2) Ð²ÑÐµÑÐµÐ´Ð¸Ð½Ñ cowboy Ð¿ÑÐ¾ÑÐµÑÑÐ², ÑÐµÐ°Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¸Ñ Ð²
\fIn2o_stream\fR\&.
Ð£ Ð¿ÐµÑÑÐ¾Ð¼Ñ Ð²Ð¸Ð¿Ð°Ð´ÐºÑ, ÑÐµÑÐ²ÐµÑ MQTT Ð²Ð¸ÐºÐ¾ÑÐ¸ÑÑÐ¾Ð²ÑÑÑÑÑÑ Ð¼ÑÐ¶ ÐºÐ»ÑÑÐ½ÑÐ°Ð¼Ð¸ ÑÐ° ÑÐµÑÐ²ÐµÑÐ½Ð¸Ð¼Ð¸ Ð²Ð¾ÑÐºÐµÑÐ°Ð¼Ð¸.
Ð£ Ð´ÑÑÐ³Ð¾Ð¼Ñ Ð²Ð¸Ð¿Ð°Ð´ÐºÑ, Ð· Erlang Ð¿ÑÐ¾ÑÐµÑÑÐ² Ð·Ð°Ð´ÑÑÐ½Ñ Ð»Ð¸ÑÐµ ÐºÐ»ÑÑÐ½ÑÐ¸.
ÐÐ¸ Ð¼Ð¾Ð¶ÐµÑÐµ ÑÑÐ²Ð¾ÑÐ¸ÑÐ¸ Ð²Ð»Ð°ÑÐ½Ñ ÐºÐ¾Ð½ÑÑÐ³ÑÑÐ°ÑÑÑ ÑÐ¸ÐºÐ»Ñ Ð¾Ð±ÑÐ¾Ð±ÐºÐ¸ N2O.
.LP
.LP
Ð¡Ð°Ð¼ Ð¿Ð¾ ÑÐ¾Ð±Ñ, N2O â ÑÐµ Ð²Ð±ÑÐ´Ð¾Ð²ÑÐ²Ð°Ð½Ð¸Ð¹ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»ÑÐ½Ð¸Ð¹ ÑÐ¸ÐºÐ»
\fIn2o_proto\fR\& , ÑÐºÐ¸Ð¹ Ð²Ð¸ Ð¼Ð¾Ð¶ÐµÑÐµ Ð²ÐºÐ»ÑÑÐ°ÑÐ¸ Ñ ÑÐ²Ð¾Ñ Ð¿ÑÐ¾Ð´ÑÐºÑÐ¸.
ÐÑÑÐ¼ ÑÑÐ¾Ð³Ð¾, Ð²ÑÐ½ Ð¾Ð±ÑÐ¾Ð±Ð»ÑÑ ÐºÐµÑ ÑÐ° ÑÐµÑÑÑ
Ð· Ð³Ð½ÑÑÐºÐ¸Ð¼Ð¸
\fIn2o_pi\fR\& Ð¿ÑÐ¾ÑÐµÑÐ°Ð¼Ð¸ Ð±ÐµÐ· Ð¾Ð±Ð¼ÐµÐ¶ÐµÐ½Ð½Ñ Ð¿ÑÐ°Ð²Ð° Ð²Ð»Ð°ÑÐ½Ð¾ÑÑÑ.
Ð ÑÐ°ÐºÐ¾Ð¶ Ð²Ð¸Ð·Ð½Ð°ÑÐ°Ñ AES/CBCâ128 ÐºÐ¾Ð´ÑÐ²Ð°Ð½Ð½Ñ ÑÐ° BERT/JSON Ð´ÐµÐºÐ¾Ð´ÐµÑ.

.SH Ð¢ÐÐÐ
.nf
-type formatter() :: binary | json | bert | text | default | atom().
-type response()  :: { formatter(), binary() }.
.fi
.nf
#ok { data  = [] :: term() }.
#error { data  = [] :: term() }.
.fi
.nf
#reply { resp  = [] :: [] | response(),
req   = [] :: [] | term(),
state = [] :: [] | term() }.
#unknown { data  = [] :: [] | binary(),
req   = [] :: [] | term(),
state = [] :: [] | term() }.
.fi
.nf
#cx { session   = [] :: [] | binary(),
formatter = bert :: bert | json,
actions   = [] :: list(tuple()),
state     = [] :: [] | term(),
module    = [] :: [] | atom(),
lang      = [] :: [] | atom(),
path      = [] :: [] | binary(),
node      = [] :: [] | atom(),
pid       = [] :: [] | pid(),
vsn       = [] :: [] | integer() }).
.fi

.SH ÐÐ ÐÐ¢ÐÐÐÐ
.LP
Ð¥Ð¾ÑÐ° Ð²ÑÑ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ð¸ Ð´Ð¾Ð´Ð°ÑÐºÑÐ² Ð² ÑÐ¸ÑÑÐµÐ¼Ñ Ð²Ð¸Ð¼Ð°Ð³Ð°ÑÑÑ ÑÐµÑÐµÐ´Ð¾Ð²Ð¸ÑÐµ Ð· Ð¾Ð´Ð½Ð¸Ð¼ ÐµÑÐµÐºÑÐ¾Ð¼,
Ð°Ð±Ð¾ Ð· ÑÐ°ÐºÐ¸Ð¼ Ð¶Ðµ ÑÐ»ÑÑÐ¾Ð¼ Ð¾Ð±ÑÐ¾Ð±ÐºÐ¸ Ð¿Ð¾Ð¼Ð¸Ð»Ð¾Ðº,
n2o
Ð²Ð¸Ð·Ð½Ð°ÑÐ°Ñ ÑÐ´Ð¸Ð½Ð¸Ð¹ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»ÑÐ½Ð¸Ð¹ ÑÐ¸ÐºÐ»,
ÑÐº ÑÑÐµÐº Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»ÑÐ², Ð´Ð»Ñ Ð²ÑÑÑ Ð´Ð¾Ð´Ð°ÑÐºÑÐ².
.LP
Ð Ð±Ð°Ð·Ð¾Ð²Ð¾Ð¼Ñ Ð²Ð°ÑÑÐ°Ð½ÑÑ
n2o
Ð¼ÑÑÑÐ¸ÑÑ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ð¸ NITRO ÑÐ° FTP,
ÑÐ¾ Ð´Ð¾Ð·Ð²Ð¾Ð»ÑÑ ÑÑÐ²Ð¾ÑÑÐ²Ð°ÑÐ¸ Ð¿ÑÐ°ÑÑÑÑÑ Ð² ÑÐµÐ¶Ð¸Ð¼Ñ ÑÐµÐ°Ð»ÑÐ½Ð¾Ð³Ð¾ ÑÐ°ÑÑ Ð²ÐµÐ±-Ð´Ð¾Ð´Ð°ÑÐºÐ¸,
Ð· Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ð°Ð¼Ð¸ Ð½Ð° Ð¾ÑÐ½Ð¾Ð²Ñ Ð±ÑÐ½Ð°ÑÐ½Ð¸Ñ,
Ð° ÑÐ°ÐºÐ¾Ð¶ â Ð½Ð°Ð´ÑÐ¹Ð½Ð¸Ð¹ ÑÐ° Ð¿ÑÐ¾Ð´ÑÐºÑÐ¸Ð²Ð½Ð¸Ð¹ ÐºÐ»ÑÑÐ½Ñ Ð´Ð»Ñ Ð²Ð¸Ð²Ð°Ð½ÑÐ°Ð¶ÐµÐ½Ð½Ñ ÑÐ°Ð¹Ð»ÑÐ²,
ÑÐ°Ð·Ð¾Ð¼ Ð· Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ð¾Ð¼ Ð¿ÐµÑÐµÐ´Ð°ÑÑ ÑÐ°Ð¹Ð»ÑÐ².
ÐÐ»Ñ ÑÑÐ²Ð¾ÑÐµÐ½Ð½Ñ NITRO Ð²ÐµÐ±-Ð´Ð¾Ð´Ð°ÑÐºÑÐ², Ð²Ð°Ð¼ Ð½ÐµÐ¾Ð±ÑÑÐ´Ð½Ð¾ Ð¿ÑÐ´ÐºÐ»ÑÑÐ¸ÑÐ¸
nitro
Ð² Ð·Ð°Ð»ÐµÐ¶Ð½Ð¾ÑÑÑ.
info(term(),term(),#cx{}) -> #reply{} | #unknown{}.
.LP
info/3
â ÑÑÐ½ÐºÑÑÑ Ð·Ð²Ð¾ÑÐ¾ÑÐ½ÑÐ¾Ð³Ð¾ Ð²Ð¸ÐºÐ»Ð¸ÐºÑ (ÐºÐ¾Ð»Ð±ÐµÐº) N2O Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ñ,
ÑÐºÐ° Ð²Ð¸ÐºÐ»Ð¸ÐºÐ°ÑÑÑÑÑ Ð¿ÑÐ¸ ÐºÐ¾Ð¶Ð½Ð¾Ð¼Ñ Ð²ÑÑÐ´Ð½Ð¾Ð¼Ñ Ð·Ð°Ð¿Ð¸ÑÑ.

.SH RPC MQTT
.LP
N2O Ð½Ð°Ð´Ð°Ñ RPC ÑÐµÑÐµÐ· Ð¼ÐµÑÐ°Ð½ÑÐ·Ð¼ MQ Ð´Ð»Ñ MQTT Ð¿ÑÐ¸ÑÑÑÐ¾ÑÐ².
N2O Ð·Ð°Ð¿ÑÑÐºÐ°Ñ Ð½Ð°Ð±ÑÑ
\fIn2o_mqtt\fR\& Ð²Ð¾ÑÐºÐµÑÑÐ² â
\fIn2o_pi\fR\& Ð¿ÑÐ¾ÑÐµÑÑÐ², ÑÐºÑ ÑÐ»ÑÑÐ°ÑÑÑ Ð¿ÐµÐ²Ð½Ñ ÑÐ¾Ð¿ÑÐºÐ¸ Ð¿ÐµÐ²Ð½Ð¾Ñ ÐºÑÐ¼Ð½Ð°ÑÐ¸.
ÐÑÐ´Ð¿Ð¾Ð²ÑÐ´Ñ Ð½Ð°Ð´ÑÐ¸Ð»Ð°ÑÑÑÑÑ Ð´Ð¾ ÑÐµÐ¼Ð¸ Ð¿Ð¾Ð´ÑÐ¹,
ÑÐºÐ° Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸ÑÐ½Ð¾Ð³Ð¾ Ð¿ÑÐ´Ð¿Ð¸ÑÐ°Ð½Ð° Ð¿ÑÐ¸ ÑÑÐ°ÑÑÑ ÑÐµÑÑÑ MQTT.
.nf
actions/:vsn/:module/:client
events/:vsn/:node/:module/:client
.fi

.SH RPC WebSocket
.LP
Ð£ Ð²Ð¸Ð¿Ð°Ð´ÐºÑ ÑÐ¸ÑÑÐ¾Ð³Ð¾ WebSocket, Ð² N2O ÑÐµÐ°Ð»ÑÐ·Ð¾Ð²Ð°Ð½Ð¾
\fIn2o_stream\fR\& ÑÐº cowboy Ð¼Ð¾Ð´ÑÐ»Ñ, ÑÐ¾ Ð¿ÑÐ´ÑÑÐ¸Ð¼ÑÑ Ð±ÑÐ½Ð°ÑÐ½Ñ ÑÐ° ÑÐµÐºÑÑÐ¾Ð²Ñ Ð¿Ð¾Ð²ÑÐ´Ð¾Ð¼Ð»ÐµÐ½Ð½Ñ.
.nf
#binary { data :: binary() }.
#text   { data :: binary() }.
.fi

.SH ÐÐ ÐÐÐÐÐ
.LP
ÐÐ¸Ð¶ÑÐµ Ð½Ð°Ð²ÐµÐ´ÐµÐ½Ð¾ Ð¿ÑÐ¸ÐºÐ»Ð°Ð´ Ð¿ÐµÑÐµÐ²Ð¸Ð·Ð½Ð°ÑÐµÐ½Ð½Ñ INIT Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ñ.
.nf
-module(custom_init).
-include("n2o.hrl").
-export([info/3]).
info({text,<<"N2O,",Pickle/binary>>}, Req, State) ->
{'Token',Token} = n2o_session:authenticate([],Pickle),
Sid = case n2o:depickle(Token) of {{S,_},_} -> S; X -> X end,
New = State#cx{session = Sid},
{reply,{bert,{io,<<"console.log('connected')">>,
{'Token',Token}}}, Req, New};
info(Message,Req,State) -> {unknown,Message,Req,State}.
.fi

.SH ÐÐÐÐÐ¨Ð¢Ð£ÐÐÐÐÐ¯
.LP
ÐÑÐ¾ÑÑÐ¾ Ð´Ð¾Ð¿Ð¸ÑÑÑÑ ÑÐ¼'Ñ Ð¼Ð¾Ð´ÑÐ»Ñ ÑÐµÐ°Ð»ÑÐ·Ð°ÑÑÑ Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ñ Ð´Ð¾ Ð·Ð½Ð°ÑÐµÐ½Ñ ÐºÐ»ÑÑÐ°
protocol
Ð² sys.config.
.nf
[{n2o,[{cache,n2o},
{upload,"priv/static"},
{mq,n2o_syn},
{ttl,900},
{timer,{0,1,0}}
{tables,[cookies,file,caching,ring,async]},
{hmac,sha256},
{filename,n2o_ftp},
{formatter,n2o_bert},
{session,n2o_session},
{pickler,n2o_secret},
{protocols,[n2o_ftp,n2o_nitro]},
{nitro_prolongate,false},
{filter,{n2o_proto,push}},
{origin,<<"*">>},
{timer,{0,10,0}}]}].
.fi
.LP
N2O â ÑÐµ ÑÐ°ÑÐ°Ð´ Ð´Ð»Ñ Ð½Ð°ÑÑÑÐ¿Ð½Ð¸Ñ ÑÐµÑÐ²ÑÑÑÐ²: ÐºÐµÑ, MQ, ÑÐ¾ÑÐ¼Ð°ÑÑÐ²Ð°Ð½Ð½Ñ Ð¿Ð¾Ð²ÑÐ´Ð¾Ð¼Ð»ÐµÐ½Ñ,
ÑÐµÑÑÑ, ÐºÐ¾Ð´ÑÐ²Ð°Ð½Ð½Ñ ÑÐ° ÑÐ¸ÐºÐ»ÑÐ² Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»ÑÐ². ÐÐ½ÑÐ¾Ñ ÑÐ°ÑÑÐ¸Ð½Ð¾Ñ N2O Ñ Ð¼Ð¾Ð´ÑÐ»Ñ
\fIn2o_pi\fR\& ,
ÑÐºÐ¸Ð¹ Ð·Ð°Ð¿ÑÑÐºÐ°Ñ Ð¿ÑÐ¾ÑÐµÑÐ¸ Ð´Ð¾Ð´Ð°ÑÐºÑ Ð¿ÑÐ´ Ð½Ð°Ð³Ð»ÑÐ´Ð¾Ð¼, Ð´Ð»Ñ Ð¼Ð¾Ð¶Ð»Ð¸Ð²Ð¾ÑÑÑ Ð²Ð¸ÐºÐ¾ÑÐ¸ÑÑÐ°Ð½Ð½Ñ N2O API.
Ð ÑÑÐ¹ Ð¿ÑÐ¾ÑÑÑÐ¹ ÐºÐ¾Ð½ÑÑÐ³ÑÑÐ°ÑÑÑ Ð²Ð¸ Ð¼Ð¾Ð¶ÐµÑÐµ Ð²ÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÐ¸ Ð±ÑÐ´Ñ-ÑÐºÑ ÑÐµÐ°Ð»ÑÐ·Ð°ÑÑÑ Ð´Ð»Ñ Ð±ÑÐ´Ñ-ÑÐºÐ¾Ð³Ð¾ ÑÐµÑÐ²ÑÑÑ.
.LP
ÐÐ°ÑÑÑÐ¿Ð½Ñ ÑÐµÑÐ²ÑÑÐ¸, Ð½Ð°ÑÐ²Ð½Ñ Ð² Ð¼Ð¾Ð´ÑÐ»Ñ
n2o
, Ð²Ð¸ ÑÐ°ÐºÐ¾Ð¶ Ð¼Ð¾Ð¶ÐµÑÐµ Ð´Ð¾Ð²ÑÐ»ÑÐ½Ð¾ Ð½Ð°Ð»Ð°ÑÑÐ¾Ð²ÑÐ²Ð°ÑÐ¸:

.SH CACHE
.LP
ÐÐµÑ â Ð¼ÐµÑÐ°Ð½ÑÐ·Ð¼ Ð·Ð±ÐµÑÑÐ³Ð°Ð½Ð½Ñ Ð² ÑÐ²Ð¸Ð´ÐºÑÐ¹ Ð¿Ð°Ð¼ÑÑÑ.
ÐÑÐ¾ÑÑÐ¾ Ð·Ð±ÐµÑÑÐ³Ð°Ð¹ÑÐµ Ð·Ð½Ð°ÑÐµÐ½Ð½Ñ Ð´Ð»Ñ ÐºÐ»ÑÑÑÐ² Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ Ð½Ð°ÑÑÑÐ¿Ð½Ð¸Ñ ÑÑÐ½ÐºÑÑÐ¹,
Ð° ÑÐ¸ÑÑÐµÐ¼Ð½Ð¸Ð¹ ÑÐ°Ð¹Ð¼ÐµÑ Ð¾ÑÐ¸ÑÑÐ²Ð°ÑÐ¸Ð¼Ðµ Ð¿ÑÐ¾ÑÑÑÐ¾ÑÐµÐ½Ñ Ð·Ð°Ð¿Ð¸ÑÐ¸.
ÐÐ¸ Ð¼Ð¾Ð¶ÐµÑÐµ Ð²Ð¸Ð±ÑÐ°ÑÐ¸ ÑÐµÐ°Ð»ÑÐ·Ð°ÑÑÑ Ð¼Ð¾Ð´ÑÐ»Ñ ÐºÐµÑÑÐ²Ð°Ð½Ð½Ñ, Ð·Ð° Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ
Ð¿Ð°ÑÐ°Ð¼ÐµÑÑÑ cache Ð±ÑÐ±Ð»ÑÐ¾ÑÐµÐºÐ¸ N2O.
Ð ÐµÐ°Ð»ÑÐ·Ð°ÑÑÑ n2o cache Ð·Ð° Ð·Ð°Ð¼Ð¾Ð²ÑÑÐ²Ð°Ð½Ð½ÑÐ¼ ÑÐ²Ð»ÑÑ ÑÐ¾Ð±Ð¾Ñ ets Ð· ÑÐµÑÐ¼ÑÐ½Ð¾Ð¼ Ð·Ð±ÐµÑÑÐ³Ð°Ð½Ð½Ñ Ð·Ð°Ð¿Ð¸ÑÑÐ².
cache(Tab, Key, Value, Till) -> term().
.LP
ÐÐ°Ð¿Ð¸ÑÑÑ Ð·Ð½Ð°ÑÐµÐ½Ð½Ñ Value ÑÐ· Ð·Ð°Ð´Ð°Ð½Ð¸Ð¼ TTL.
cache(Tab, Key) -> term().
.LP
ÐÐ¾Ð²ÐµÑÑÐ°Ñ Ð·Ð½Ð°ÑÐµÐ½Ð½Ñ Ð¿Ð¾ ÐºÐ»ÑÑÑ Key.

.SH MQ
.LP
ÐÑÐ½ÑÐ¼Ð°Ð»ÑÐ½Ð¾Ñ Ð²Ð¸Ð¼Ð¾Ð³Ð¾Ñ Ð´Ð¾ Ð±ÑÐ´Ñ-ÑÐºÐ¾Ð³Ð¾ ÑÑÐµÐ¹Ð¼Ð²Ð¾ÑÐºÐ° Ñ Ð½Ð°ÑÐ²Ð½ÑÑÑÑ pub/sub API.
N2O Ð½Ð°Ð´Ð°Ñ Ð½Ð°Ð»Ð°ÑÑÐ¾Ð²ÑÐ²Ð°Ð½Ð¸Ð¹ API ÑÐµÑÐµÐ· Ð¿Ð°ÑÐ°Ð¼ÐµÑÑ Ð½Ð°Ð»Ð°ÑÑÑÐ²Ð°Ð½Ñ
mq
.
reg(term()) -> term().
.LP
ÐÑÐ´Ð¿Ð¸ÑÐ°ÑÐ¸ Ð¿Ð¾ÑÐ¾ÑÐ½Ð¾Ð³Ð¾ ÐºÐ»ÑÑÐ½ÑÐ° Ð½Ð° transient topic.
Ð£ ÐºÐ¾Ð½ÐºÑÐµÑÐ½Ð¸Ñ ÑÐµÐ°Ð»ÑÐ·Ð°ÑÑÑÑ ÑÐµÐ¼Ð°Ð½ÑÐ¸ÐºÐ° Ð¼Ð¾Ð¶Ðµ Ð²ÑÐ´ÑÑÐ·Ð½ÑÑÐ¸ÑÑ.
Ð MQTT Ð²Ð¸ Ð¼Ð¾Ð¶ÐµÑÐµ Ð¿ÑÐ´Ð¿Ð¸ÑÐ°ÑÐ¸ Ð¾ÑÑÐ»Ð°Ð¹Ð½/Ð¾Ð½Ð»Ð°Ð¹Ð½ ÐºÐ»ÑÑÐ½ÑÑÐ² Ð½Ð° Ð±ÑÐ´Ñ-ÑÐºÐ¸Ð¹ Ð¿ÐµÑÑÐ¸ÑÑÐµÐ½ÑÐ½Ð¸Ð¹ ÑÐ¾Ð¿ÑÐº.
Ð¢Ð°ÐºÐ¾Ð¶ Ð² MQTT ÑÑ ÑÑÐ½ÐºÑÑÑ Ð¿ÑÐ´Ð¿Ð¸ÑÑÑ ÐºÐ»ÑÑÐ½ÑÐ°, Ð° Ð½Ðµ Erlang Ð¿ÑÐ¾ÑÐµÑ.
unreg(term()) -> term().
.LP
ÐÑÐ´Ð¿Ð¸ÑÐ°ÑÐ¸ Ð¿Ð¾ÑÐ¾ÑÐ½Ð¾Ð³Ð¾ ÐºÐ»ÑÑÐ½ÑÐ° Ð²ÑÐ´ Ð¿ÐµÑÐµÑÑÐ´Ð½Ð¸Ð¹ ÑÐ¾Ð¿ÑÐº.
Ð MQTT Ð²Ð¸ Ð¼Ð¾Ð¶ÐµÑÐµ Ð²Ð¸Ð´Ð°Ð»Ð¸ÑÐ¸ Ð¿ÑÐ´Ð¿Ð¸ÑÐºÑ Ð· Ð¿ÐµÑÑÐ¸ÑÑÐµÐ½ÑÐ½Ð¾Ñ Ð±Ð°Ð·Ð¸ Ð´Ð°Ð½Ð¸Ñ.
send(term(), term()) -> term().
.LP
ÐÐ¿ÑÐ±Ð»ÑÐºÑÐ²Ð°ÑÐ¸ Ð¿Ð¾Ð²ÑÐ´Ð¾Ð¼Ð»ÐµÐ½Ð½Ñ Ð² ÑÐ¾Ð¿ÑÐºÑ.
Ð MQTT ÐºÐ»ÑÑÐ½ÑÐ¸ Ð¾ÑÑÐ¸Ð¼Ð°ÑÑÑ Ð¿Ð¾Ð²ÑÐ´Ð¾Ð¼Ð»ÐµÐ½Ð½Ñ Ð·Ñ ÑÑÐ¾Ð²Ð¸ÑÐ° ÐµÑÑÑÐ½Ð¸Ñ ÑÑÐ°Ð½Ð·Ð°ÐºÑÑÐ¹, ÑÐº ÑÑÐ»ÑÐºÐ¸ Ð¿Ð¾ÑÐ²Ð»ÑÑÑÑÑ Ð¾Ð½Ð»Ð°Ð¹Ð½,
Ñ Ð²Ð¸Ð¿Ð°Ð´ÐºÑ, ÑÐºÑÐ¾ Ð½Ð° Ð¼Ð¾Ð¼ÐµÐ½Ñ Ð¿ÑÐ±Ð»ÑÐºÐ°ÑÑÑ Ð¿Ð¾Ð²ÑÐ´Ð¾Ð¼Ð»ÐµÐ½Ð½Ñ Ð²Ð¾Ð½Ð¸ Ð±ÑÐ»Ð¸ Ð¾ÑÑÐ»Ð°Ð¹Ð½.

.SH FORMAT
.LP
ÐÐ¸ Ð²ÐºÐ°Ð·ÑÑÑÐµ ÑÐ¾ÑÐ¼Ð°ÑÑÐ²Ð°Ð½Ð½Ñ Ð² Ð¿ÑÐ¾ÑÐ¾ÐºÐ¾Ð»Ñ Ð¿Ð¾Ð²ÐµÑÐ½ÐµÐ½Ð½Ñ Ð¿Ð¾Ð²ÑÐ´Ð¾Ð¼Ð»ÐµÐ½Ð½Ñ. ÐÐ°Ð¿ÑÐ¸ÐºÐ»Ð°Ð´:
.nf
info({Code}, Req, State) ->
{reply,{bert,{io,nitro:jse(Code),<<>>}}, Req, State};
.fi
encode(record()) -> binary().
.LP
Ð¡ÐµÑÑÐ°Ð»ÑÐ·ÑÑÑÑÑÑ Ð· ÐºÐ¾ÑÑÐµÐ¶Ð°.
decode(binary()) -> record().
.LP
Ð¡ÐµÑÑÐ°Ð»ÑÐ·ÑÑÑÑÑÑ Ð² ÐºÐ¾ÑÑÐµÐ¶.
.LP
ÐÐ¸Ð¶ÑÐµ Ð¿ÑÐ¸ÐºÐ»Ð°Ð´ ÑÐµÐ°Ð»ÑÐ·Ð°ÑÑÑ
n2o_bert
ÑÐ¾ÑÐ¼Ð°ÑÑÐµÑÐ°:
.nf
encode(Erl) -> term_to_binary(Erl).
decode(Bin) -> binary_to_term(Bin,[safe]).
.fi

.SH SESSION
.LP
Ð¡ÐµÑÑÑ Ð·Ð±ÐµÑÑÐ³Ð°ÑÑÑÑÑ Ð² issued tokens, Ð·Ð°ÐºÐ¾Ð´Ð¾Ð²Ð°Ð½Ñ Ð· Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾Ñ AES/CBC-128.
ÐÐ° Ð·Ð°Ð¼Ð¾Ð²ÑÑÐ²Ð°Ð½Ð½ÑÐ¼, Ð²ÑÑ Ð·Ð½Ð°ÑÐµÐ½Ð½Ñ ÑÐµÑÑÑ Ð·Ð±ÐµÑÑÐ³Ð°ÑÑÑÑÑ Ñ Ð²Ð¸Ð³Ð»ÑÐ´Ñ ÐºÐµÑÑ Ð² ETS, Ð· ÑÐµÐ°Ð»ÑÐ·Ð°ÑÑÑÑ Ð²
\fIn2o_session\fR\&.
session(Key, Value) -> term().
.LP
ÐÑÑÐ°Ð½Ð¾Ð²Ð¸ÑÐ¸ Ð·Ð½Ð°ÑÐµÐ½Ð½Ñ Ð·Ð¼ÑÐ½Ð½Ð¾Ñ ÑÐµÑÑÑÑ.
.nf
1> rr(n2o).
[bin,client,cx,direct,ev,flush,ftp,ftpack,handler,
mqtt_client,mqtt_message,pickle,server]
2> put(context,#cx{}).
undefined
3> n2o:session(user,maxim).
maxim
4> ets:tab2list(cookies).
[{{[],user},{63710014344,"maxim"}},
{{<<"5842b7e749a8cf44c920">>,auth},{63710014069,[]}]
.fi
session(Key) -> term().
.LP
ÐÑÑÐ¸Ð¼Ð°ÑÐ¸ Ð·Ð½Ð°ÑÐµÐ½Ð½Ñ Ð·Ð¼ÑÐ½Ð½Ð¾Ñ ÑÐµÑÑÑ.

.SH PICKLE
pickle(term()) -> binary().
.LP
ÐÐ¾Ð´ÑÐ²Ð°Ð½Ð½Ñ Erlang ÑÐµÑÐ¼Ð°.
depickle(binary()) -> term().
.LP
ÐÐµÐºÐ¾Ð´ÑÐ²Ð°Ð½Ð½Ñ Erlang ÑÐµÑÐ¼Ð°.

.SH ALSO
.LP
\fB\fIn2o_pi(1)\fR\&\fR\&, \fB\fIn2o_auth(1)\fR\&\fR\&, \fB\fIn2o_stream(1)\fR\&\fR\&, \fB\fIn2o_mqtt(1)\fR\&\fR\&, \fB\fIn2o_proto(1)\fR\&\fR\&,