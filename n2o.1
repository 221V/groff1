.TH n2o 1 "n2o 4.5.0" "Synrc Research Center" "N2O"
.SH NAME
n2o \- Protocol and Application Server

.SH INTRO
.LP
The
\fIn2o\fR\& defines the way you create, configure and run
arbitrary applications and protocols inside some hosts, into
which N2O can be injected, such as
\fIcowboy\fR\& and
\fIemqttd\fR\&.
Each application can spawn its instance in its way like
web pages spawn WebSocket connections, workflow engines
spawn business processes, and chat applications spawns roster
and chatroom processes. With N2O everything is managed by protocols.
.LP
N2O shipped to work in two modes:
1) inside
\fIn2o_mqtt\fR\& workers;
2) inside cowboy processes, implemented in
\fIn2o_stream\fR\&.
In the first case, the MQTT server used between clients and server workers.
In the second case, no more Erlang processes introduced except clients.
You can create your configuration of N2O processing loop.
.LP
.LP
The N2O itself is an embeddable protocol loop in
\fIn2o_proto\fR\&.
However, besides that, it handles cache and sessions
along with flexible
\fIn2o_pi\fR\& processes with no ownership restriction.
It also introduces AES/CBCâ€”128 pickling and BERT/JSON encoder.

.SH TYPES
.nf
-type formatter() :: binary | json | bert | text | default | atom().
-type response()  :: { formatter(), binary() }.
.fi
.nf
#ok { data  = [] :: term() }.
#error { data  = [] :: term() }.
.fi
.nf
#reply { resp  = [] :: [] | response(),
req   = [] :: [] | term(),
state = [] :: [] | term() }.
#unknown { data  = [] :: [] | binary(),
req   = [] :: [] | term(),
state = [] :: [] | term() }.
.fi
.nf
#cx { session   = [] :: [] | binary(),
formatter = bert :: bert | json,
actions   = [] :: list(tuple()),
state     = [] :: [] | term(),
module    = [] :: [] | atom(),
lang      = [] :: [] | atom(),
path      = [] :: [] | binary(),
node      = [] :: [] | atom(),
pid       = [] :: [] | pid(),
vsn       = [] :: [] | integer() }).
.fi

.SH PROTOCOL
.LP
While all application protocols in the system are desired
to have single effect environment or same error handling path,
n2o
defines a single protocol loop for all applications
as stack of protocols.
.LP
In core bundle
n2o
is shipped with NITRO and FTP protocols
which allows you to create real-time web applications with
binary-based protocols, also providing robust and performant
upload client and file transfer protocol. For building
web-based NITRO applications, you need to include
nitro
dependency.
info(term(),term(),#cx{}) -> #reply{} | #unknown{}.
.LP
The
info/3
is an N2O protocol callback that to be called
on each incoming request.

.SH RPC MQTT
.LP
N2O provides RPC over MQ mechanism for MQTT devices.
N2O spawns a set of
\fIn2o_mqtt\fR\& workers
as
\fIn2o_pi\fR\& processes that listen to
events topic. The responses send to actions topic, which is
subscribed automatically on MQTT session init.
.nf
actions/:vsn/:module/:client
events/:vsn/:node/:module/:client
.fi

.SH RPC WebSocket
.LP
In pure WebSocket case, N2O implements
\fIn2o_stream\fR\& as cowboy module supporting binary and text messages.
.nf
#binary { data :: binary() }.
#text { data :: binary() }.
.fi

.SH EXAMPLE
.LP
Here is an example of overriding INIT protocol.
.nf
-module(custom_init).
-include("n2o.hrl").
-export([info/3]).
info({text,<<"N2O,",Pickle/binary>>}, Req, State) ->
{'Token',Token} = n2o_session:authenticate([],Pickle),
Sid = case n2o:depickle(Token) of {{S,_},_} -> S; X -> X end,
New = State#cx{session = Sid},
{reply,{bert,{io,<<"console.log('connected')">>,
{'Token',Token}}}, Req, New};
info(Message,Req,State) -> {unknown,Message,Req,State}.
.fi

.SH CONFIG
.LP
Just put protocol implementation module name to
protocol
option in sys.config.
.nf
[{n2o,[{cache,n2o},
{upload,"priv/static"},
{mq,n2o_syn},
{ttl,900},
{timer,{0,1,0}}
{tables,[cookies,file,caching,ring,async]},
{hmac,sha256},
{filename,n2o_ftp},
{formatter,n2o_bert},
{session,n2o_session},
{pickler,n2o_secret},
{protocols,[n2o_ftp,n2o_nitro]},
{nitro_prolongate,false},
{filter,{n2o_proto,push}},
{origin,<<"*">>},
{timer,{0,10,0}}]}].
.fi
.LP
N2O is the facade of the following services: cache, MQ, message formatting,
sessions, pickling and protocol loops. The other part of N2O is
\fIn2o_pi\fR\& module
for spawning supervised application processes to use N2O API. In this simple
configuration, you may set any implementation for any service.
.LP
The following configurable services are publically available in
n2o
module:

.SH CACHE
.LP
Cache is a fast expirable memory store. Just put values onto keys using
these functions and system timer will clear expired entries eventually.
You can select caching module implementation by setting cache n2o parameter
to the module name. Default n2o cache implementation turns each ets store
into expirable.
cache(Tab, Key, Value, Till) -> term().
.LP
Sets a Value with a given TTL.
cache(Tab, Key) -> term().
.LP
Gets a Value.

.SH MQ
.LP
The minimal requirement for any framework is the pub/sub API.
N2O provides selectable API through
mq
environment parameter.
reg(term()) -> term().
.LP
Subscribe a current client to a transient topic. In particular
implementation, the semantics could differ. In MQTT you can
subscribe offline/online clients to any persistent topic. Also in MQTT
this function subscribes MQTT client not an Erlang processe.
unreg(term()) -> term().
.LP
Unsubscribe a current client from a transient topic.
In MQTT we remove the subscription from the persistent database.
send(term(), term()) -> term().
.LP
Publish a message to a topic. In MQTT if clients are offline,
they will receive offline messages from the in-flight storage
once they become online.

.SH FORMAT
.LP
You specify the formatter in the protocol return message. E.g:
.nf
info({Code}, Req, State) ->
{reply,{bert,{io,nitro:jse(Code),<<>>}}, Req, State};
.fi
encode(record()) -> binary().
.LP
Serializes a record.
decode(binary()) -> record().
.LP
Deserializes a record.
.LP
Here is an example of
n2o_bert
formatter implementation.
.nf
encode(Erl) -> term_to_binary(Erl).
decode(Bin) -> binary_to_term(Bin,[safe]).
.fi

.SH SESSION
.LP
Sessions are stored in issued tokens encripted with AES/CBC-128.
All session variables are cached in ETS table in the default
implementation
\fIn2o_session\fR\&.
session(Key, Value) -> term().
.LP
Sets a value to session variable.
.nf
1> rr(n2o).
[bin,client,cx,direct,ev,flush,ftp,ftpack,handler,
mqtt_client,mqtt_message,pickle,server]
2> put(context,#cx{}).
undefined
3> n2o:session(user,maxim).
maxim
4> ets:tab2list(cookies).
[{{[],user},{63710014344,"maxim"}},
{{<<"5842b7e749a8cf44c920">>,auth},{63710014069,[]}]
.fi
session(Key) -> term().
.LP
Gets a value of session variable.

.SH PICKLE
pickle(term()) -> binary().
.LP
Custom Erlang term serialization.
depickle(binary()) -> term().
.LP
Custom Erlang term deserialization.

.SH ALSO
.LP
\fB\fIn2o_pi(1)\fR\&\fR\&, \fB\fIn2o_auth(1)\fR\&\fR\&, \fB\fIn2o_stream(1)\fR\&\fR\&, \fB\fIn2o_mqtt(1)\fR\&\fR\&, \fB\fIn2o_proto(1)\fR\&\fR\&